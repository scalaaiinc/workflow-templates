name: Python CI/CD for modules only

on:
  workflow_call:

jobs:
  # =================================================================
  #  Continuous Integration (CI) Job
  #  This job runs on every push, pull request, and release creation.
  #  It installs dependencies, runs tests, and reports coverage.
  # =================================================================
  test:
    name: Run Unit Tests & Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12', '3.13'] # Run tests on multiple Python versions

    steps:
      # 1. Checkout the repository code
      - name: Check out code
        uses: scalaaiinc/checkout@main

      # 2. Set up the specified Python version
      - name: Set up Python ${{ matrix.python-version }}
        uses: scalaaiinc/setup-python@main
        with:
          python-version: ${{ matrix.python-version }}

      - name: Configure pip for AWS CodeArtifact
        run: |
          aws codeartifact login --tool pip --domain ${{ secrets.CODEARTIFACT_DOMAIN }} --repository ${{ secrets.CODEARTIFACT_REPOSITORY }} --region us-east-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.LIVE_CICD_AWS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.LIVE_CICD_AWS_SECRET }}
          AWS_DEFAULT_REGION: us-east-1

      # 3. Install project dependencies
      - name: Install dependencies
        run: |
          if [ -f "requirements.txt" ]; then
            python -m pip install -r requirements.txt
          else
            python -m pip install -e ".[dev]"
          fi

      # 4. Check if the tests directory exists
      - name: Check for tests directory
        id: check_tests_dir
        run: |
          if [ -d "tests" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      # 5. Run tests with coverage if the directory exists
      #    - This step is skipped if the 'tests' directory is not found.
      - name: Start DynamoDB Local
        if: steps.check_tests_dir.outputs.exists == 'true'
        run: |
          docker run -d -p 8000:8000 --name dynamodb-local amazon/dynamodb-local

      - name: Configure AWS Credentials for Playground
        uses: scalaaiinc/configure-aws-credentials@main
        with:
          aws-access-key-id: ${{ secrets.PLAYGROUND_CICD_AWS_KEY }}
          aws-secret-access-key: ${{ secrets.PLAYGROUND_CICD_AWS_SECRET }}
          aws-region: us-east-1 # <-- IMPORTANT: Change this to your desired AWS region

      - name: Run tests and generate coverage report
        if: steps.check_tests_dir.outputs.exists == 'true'
        run: |
          pytest --cov-report=html tests

      - name: Publish HTML coverage report
        if: steps.check_tests_dir.outputs.exists == 'true'
        uses: scalaaiinc/upload-artifact@main
        with:
          name: coverage-html-${{ matrix.python-version }}
          path: htmlcov/

  module-deploy:
    name: Deploy to Artifactory
    needs: test # This job will only run if the 'test' job succeeds
    runs-on: ubuntu-latest
    # Condition: Only run on pushes to branches starting with 'feature/'
    if: github.event_name == 'release'

    steps:
      - name: Check out code
        uses: scalaaiinc/checkout@main

      - name: Set up Python
        uses: scalaaiinc/setup-python@main
        with:
          python-version: '3.12'

      - name: Configure pip for AWS CodeArtifact
        run: |
          aws codeartifact login --tool pip --domain ${{ secrets.CODEARTIFACT_DOMAIN }} --repository ${{ secrets.CODEARTIFACT_REPOSITORY }} --region us-east-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.LIVE_CICD_AWS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.LIVE_CICD_AWS_SECRET }}
          AWS_DEFAULT_REGION: us-east-1

      - name: Install dependencies
        run: |
          if [ -f "requirements.txt" ]; then
            python -m pip install -r requirements.txt
          else
            python -m pip install -e ".[dev]"
          fi

      - name: Build Python module
        run: |
          python -m build

      - name: Configure Twine for AWS CodeArtifact
        run: |
          aws codeartifact login --tool twine --domain ${{ secrets.CODEARTIFACT_DOMAIN }} --repository ${{ secrets.CODEARTIFACT_REPOSITORY }} --region us-east-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.LIVE_CICD_AWS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.LIVE_CICD_AWS_SECRET }}
          AWS_DEFAULT_REGION: us-east-1

      - name: Upload to AWS CodeArtifact with Twine
        run: |
          twine upload --repository codeartifact ./dist/*.whl
